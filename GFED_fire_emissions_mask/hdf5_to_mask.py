# -*- coding: utf-8 -*-
"""
Created on Mon Apr 20 12:04:17 2020

@author: Jasper Dijkstra, edited from script from Todd Karin
"""

import h5py
import numpy as np
import os



def read_hdf5(day, month, year):
    """

    Parameters
    ----------
    day : int
        day to read GFED data about.
    month : int
        month to read GFED data about.
    year : int
        year to read GFED data about.

    Returns
    -------
    lat_hdf : np.array(720,)
        latitudes of data in hdf file.
    lon_hdf : np.array(1440,)
        longitudes of data in hdf file.
    data : np.array(720,1440)
        data on daily carbon emissions in g Carbon m^-2 day^-1.

    """
    
    # Get Path of current script
    full_path = str(os.path.realpath('__file__'))
    path, _ = os.path.split(full_path)
    
    # Navigate to the correct hdf5 folder
    try:
        mask_filename = str(path + r'\GFED4.1s_{}_beta.hdf5'.format(year))
        f = h5py.File(mask_filename, mode='r')
    except OSError:
        mask_filename = str(path + r'\GFED_fire_emissions_mask\GFED4.1s_{}_beta.hdf5'.format(year))
        f = h5py.File(mask_filename, mode='r')
    
        
    # Get daily (mask) and lat/lon data from hdf5 file
    monthly_data = f['/emissions/{}/C'.format(month)][:]
    daily_fraction = f['/emissions/{}/daily_fraction/day_{}'.format(month, day)][:]
    data = np.multiply(monthly_data, daily_fraction)
    lat_hdf = f['/lat'][:]
    lat_hdf = lat_hdf[:, 0]
    lon_hdf = f['/lon'][:]
    lon_hdf = lon_hdf[0]
    
    return lat_hdf, lon_hdf, data



def is_wildfire(hdf_tuple, lat, lon):
    
    # Get data generated by read HDF_File:
    lat_hdf = hdf_tuple[0]
    lon_hdf = hdf_tuple[1]
    mask = hdf_tuple[2]

    # Convert latitude from TROPOMI to index on HDF mask
    lat = np.array(lat)
    if np.any(lat>90):
        raise ValueError('latitude must be <= 90')
    if np.any(lat<-90):
        raise ValueError('latitude must be >= -90')
    
    lat[lat > lat_hdf.max()] = lat_hdf.max()
    lat[lat < lat_hdf.min()] = lat_hdf.min()
    
    lat_i = ((lat - lat_hdf[0])/(lat_hdf[1]-lat_hdf[0])).astype('int')
    
    
    # Now convert longitude from TROPOMI to index on HDF mask
    lon = np.array(lon)
    if np.any(lon > 180):
        raise ValueError('longitude must be <= 180')
    if np.any(lon < -180):
        raise ValueError('longitude must be >= -180')
    
    lon[lon > lon_hdf.max()] = lon_hdf.max()
    lon[lon < lon_hdf.min()] = lon_hdf.min()
    
    lon_i = ((lon - lon_hdf[0]) / (lon_hdf[1] - lon_hdf[0])).astype('int')
    
    mask_column = mask[lat_i,lon_i]
    
    return mask_column
